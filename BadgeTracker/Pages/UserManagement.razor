@page "/UserManagement"
@using System.Collections.Generic
@using System.Linq
@using AntDesign
@using AntDesign.TableModels

@inject IUserService UserService;
@inject IEarnablesService EarnablesService;


<h3>User Management</h3>

<a href="AddGuide">
    <i class="material-icons">
        person_add
    </i>
    Add a New Girl Guide
</a>

<div class="col d-flex justify-content-end">
    <div class="align-self-end" style="width:200px;">
        <Input Placeholder="Search for User" @bind-Value="@txtValue" BindOnInput />
        <br />
        <br />
    </div>
</div>


<Table DataSource="@filteredUsers" TItem="User" RowClassName="@(_=>"editable-row")" Bordered TableLayout="fixed">
    <ChildContent Context="data">
        <Column TData="string" Title="Name">
            <a href="ViewGuide/@data.UserId">@data.Name</a>
        </Column>

        <Column TData="string" Title="Earned Badges">
            <Dropdown @ref="@_dropdown">
                <Overlay>
                    <Menu OnMenuItemClicked="HandleMenuClick" AutoCloseDropdown="@false">
                        @foreach (EarnedBadge badge in earnedBadges[data.UserId])
                        {
                            prereqCounter++;
                            <MenuItem Id="@prereqCounter.ToString()">@badge.Badge.Name</MenuItem>
                        }
                        @foreach (CompletedActivity activity in completedActivities[data.UserId])
                        {
                            prereqCounter++;
                            <MenuItem Id="@prereqCounter.ToString()">@activity.Activity.Id</MenuItem>
                        }
                    </Menu>
                </Overlay>
                <ChildContent>
                    <a class="ant-dropdown-link" @onclick:preventDefault>
                        Hover to see badges <Icon Type="down" />
                    </a>
                </ChildContent>
            </Dropdown>
        </Column>
        <ActionColumn Title="Edit Person" Width="10%">
            <a href="EditGuide/@data.UserId" class="centered-icon"><i class="material-icons">edit</i></a>
        </ActionColumn>
        <ActionColumn Title="Badges" class="text-center" Width="10%">
            <a href="AddBadge/@data.UserId"><i class="material-icons">add_box</i></a>
            <a href="DeleteBadge/@data.UserId"><a class="text-danger"><i class="material-icons">delete</i></a></a>
        </ActionColumn>
    </ChildContent>
</Table>

<style>
    .save {
        margin-right: 8px;
    }

    .centered-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .centered-icon i {
        margin: 0 auto;
    }
</style>

@code{

    record ItemData
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public int Age { get; set; }
        public string Address { get; set; }
    };

    IDictionary<string, (bool edit, ItemData data)> editCache = new Dictionary<string, (bool edit, ItemData data)>();
    List<ItemData> listOfData = new();

    int i = 0;
    string editId;

    private string txtValue = "";
    private List<User> users;
    private List<User> filteredUsers => users.Where(user => string.IsNullOrEmpty(txtValue) || user.Name.ToLower().Contains(txtValue.ToLower())).ToList();
    private Dictionary<int, List<EarnedBadge>> earnedBadges = new();
    private Dictionary<int, List<CompletedActivity>> completedActivities = new();
    private int prereqCounter = 0;


    protected async override Task OnInitializedAsync()
    {
        await initLists();
    }

    private async Task initLists()
    {
        users = await UserService.GetAllUsers();
        foreach (User user in users)
        {
            if (!earnedBadges.ContainsKey(user.UserId))
                earnedBadges.Add(user.UserId, await EarnablesService.GetEarnedBadgesByUserId(user.UserId) ?? new());
            else
                earnedBadges[user.UserId] = await EarnablesService.GetEarnedBadgesByUserId(user.UserId) ?? new();

            if (!completedActivities.ContainsKey(user.UserId))
                completedActivities.Add(user.UserId, await EarnablesService.GetCompletedActivitiesByUserId(user.UserId) ?? new());
            else
                completedActivities[user.UserId] = await EarnablesService.GetCompletedActivitiesByUserId(user.UserId) ?? new();
        }
    }

    private Dropdown _dropdown;

    private async void HandleMenuClick(MenuItem item)
    {
        if (item.Id == "3")
        {
            await _dropdown.Close();
        }
    }

}
