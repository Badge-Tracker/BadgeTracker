@page "/EditBadge/{Id}"

@using System.Text.Json;
@using BadgeTracker.Data;

@inject IEarnablesService EarnablesService;
@inject NavigationManager NavigationManager


<div class="container-fluid panel">
    @if (isUpdated)
    {
        <div class="container full-height">
            <div class="row full-height centered-content">
                <div class="col-md-6 text-center">
                    <h3>Updated @newBadge.Name!</h3>
                    <button class="btn btn-primary" @onclick="GoToBadgeManagement">Back to Badges and Activities</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <h3>Create a new Badge or Activity</h3>
        <Form Model="@newBadge"
          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          Size="@formSize">

        <div class="d-flex justify-content-center">
            <FormItem Label="Form Size">
                <RadioGroup @bind-Value="@formSize">
                    <Radio RadioButton Value="@AntSizeLDSType.Small">Small</Radio>
                    <Radio RadioButton Value="@AntSizeLDSType.Default">Default</Radio>
                    <Radio RadioButton Value="@AntSizeLDSType.Large">Large</Radio>
                </RadioGroup>
            </FormItem>
        </div>

        <div class="row">
            <div class="col">
                <div class="item">
                    <FormItem Label="Name">
                        <Input @bind-Value="@context.Name" Placeholder="Enter a Name" />
                    </FormItem>
                </div>
            </div>
            <div class="col">
                <div class="item">
                    <FormItem Label="Prerequisite Badges">
                        <Select Mode="multiple"
                                DataSource="@badges"
                                @bind-Values="@badgeSelectionsEnumerable"
                                Placeholder="Select prerequisites"
                                TItemValue="Data.Badge"
                                TItem="Data.Badge"
                                DefaultValues="@badgeSelectionsEnumerable"
                                LabelName="@nameof(Data.Badge.Name)">
                        </Select>
                    </FormItem>
                </div>
            </div>
            <div class="col">
                <div class="item">
                    <FormItem Label="Prerequisite Activities">
                        <Select Mode="multiple"
                                DataSource="@activities"
                                @bind-Values="@activitySelectionsEnumerable"
                                Placeholder="Select prerequisites"
                                TItemValue="Activity"
                                TItem="Activity"
                                DefaultValues="@activitySelectionsEnumerable"
                                LabelName="@nameof(Activity.Name)">
                        </Select>
                    </FormItem>
                </div>
                </div>
                <div class="row">
                    <div class="col">
                        <div class="item">
                            <FormItem Label="Description">
                            <TextArea @bind-value="context.Description" Placeholder="Enter a Description" style="width:350px;" />
                            </FormItem>
                        </div>
                    </div>
                </div>
        </div>
        <div class="d-flex justify-content-center">
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <button HtmlType="submit" class="btn btn-primary">
                    Submit
                </button>
            </FormItem>
        </div>

    </Form>
    }
</div>


<style>
    .full-height {
        min-height: 100vh;
    }

    .centered-content {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
    }
    .avatar-uploader > .ant-upload {
        width: 128px;
        height: 128px;
    }

    .container {
        display: flex;
        flex-wrap: wrap;
    }

    .row {
        display: flex;
        flex-basis: 100%;
        margin-bottom: 10px;
    }

    .col-8 {
        flex-basis: 66.67%;
        padding-right: 10px;
    }

    .col-2 {
        flex-basis: 16.67%;
        padding-right: 10px;
    }

    .item {
        padding: 10px;
    }

    .imageItem {
        padding: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .center {
        margin: auto;
        width: 50%;
        border: 3px solid green;
        padding: 10px;
    }
</style>

@code
{
    [Parameter]
    public string Id { get; set; }

    private string formSize = AntSizeLDSType.Small;
    private Data.Badge newBadge = new();
    private bool isUpdated = false;
    private List<Data.Badge> badges;
    private List<Activity> activities;
    private List<Data.Badge> badgeSelections = new();
    private IEnumerable<Data.Badge> badgeSelectionsEnumerable;
    private List<Activity> activitySelections = new();
    private IEnumerable<Activity> activitySelectionsEnumerable;


    protected async override Task OnInitializedAsync()
    {
        Int32.TryParse(Id, out int id);
        newBadge = await EarnablesService.GetBadgeById(id);

        badges = await EarnablesService.GetAllBadges();
        badges = badges.Where(b => b.Id != newBadge.Id).ToList();

        activities = await EarnablesService.GetAllActivities();

        // Due to an obscure issue with how AntDesign is comparing the badges, this has to be used
        // to populate the prerequisties.
        foreach(Data.Badge badge in newBadge.Prerequisites.Badges)
        {
            badgeSelections.Add(badges.FirstOrDefault(b => b.Id == badge.Id));
        }
        badgeSelectionsEnumerable = badgeSelections;

        foreach (Activity activity in newBadge.Prerequisites.Activities)
        {
            activitySelections.Add(activities.FirstOrDefault(a => a.Id == activity.Id));
        }
        activitySelectionsEnumerable = activitySelections;
    }

    private async void OnFinish(EditContext editContext)
    {
        newBadge.Prerequisites.Badges = badgeSelectionsEnumerable?.ToList() ?? new List<Data.Badge>();
        newBadge.Prerequisites.Activities = activitySelectionsEnumerable?.ToList() ?? new List<Activity>();
        await EarnablesService.UpdateBadge(newBadge);
        isUpdated = true;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        //Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }
    private void GoToBadgeManagement()
    {
        NavigationManager.NavigateTo("/BadgeManagement");
    }
}

