@page "/ViewGuide/{Id}"


@inject IUserService UserService;
@inject IEarnablesService EarnablesService;
@inject NavigationManager NavigationManager




@if (isDeleted)
{
    <div class="container full-height">
        <div class="row full-height centered-content">
            <div class="col-md-6 text-center">
                <h3>@user.Name has been deleted!</h3>
                <button class="btn btn-primary" @onclick="GoToUserManagement">Back to Girl Guides</button>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid panel">
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-4">
                <h4 class="text-center">Name: </h4>
                <p class="text-center">@user.Name</p>
                <br>
                <h4 class="text-center">Email: </h4>
                <p class="text-center">@user.Email</p>
                <br>
                <br>
                <div class="d-flex justify-content-center">
                    <Popconfirm OnConfirm="() => OnDeleteConfirm(user)" Title="Are you sure you want to delete this person?" Icon="close-circle">
                        <button HtmlType="submit" class="btn btn-danger">
                            Delete Guide
                        </button>
                    </Popconfirm> 
                </div>
            </div>
            <div class="col-4">
                <h4>Badges Obtained</h4>
                @foreach (EarnedBadge badge in earnedBadges)
                {
                    <p>@badge.Badge.Name</p>
                }
                <h4>Activites Completed</h4>
                @foreach (CompletedActivity activity in completedActivities)
                {
                    <p>@activity.Activity.Name</p>
                }
            </div>
            <div class="col-2">
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public string ID { get; set; }

    private record GameElement(string Id, string Text, string Icon = null)
    {
        public List<GameElement> Items { get; set; } = new List<GameElement>();
    }

    private User user;
    private List<EarnedBadge> earnedBadges = new();
    private List<CompletedActivity> completedActivities = new();
    private bool isDeleted = false;

    protected async override Task OnInitializedAsync()
    {
        Int32.TryParse(ID, out int id);
        user = await UserService.GetUserById(id);

        earnedBadges = await EarnablesService.GetEarnedBadgesByUserId(user.UserId) ?? new();
        completedActivities = await EarnablesService.GetCompletedActivitiesByUserId(user.UserId) ?? new();
    }

    private async Task OnDeleteConfirm(User user)
    {
        await UserService.DeleteUser(user);
        isDeleted = true;
    }

    private void GoToUserManagement()
    {
        NavigationManager.NavigateTo("/UserManagement");
    }
}
