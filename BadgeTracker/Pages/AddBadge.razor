@page "/AddBadge/{Id}"

@using System.Text.Json;

@inject IUserService UserService;
@inject IEarnablesService EarnablesService;
<!--for delete page you can either add another var thats passed and make it either (edit, delete) and have this page change functionality
    or you could just make a different page LOL
-->

<h3>AddBadge</h3>

<h4>@ID</h4>

@if(isAdded)
{
    <h3>Added!</h3>
}
else
{
    <Form Model="@model"

          OnFinish="OnFinish"
          OnFinishFailed="OnFinishFailed"
          Size="@model.Size">
    <FormItem Label="Select">
        <Select Mode="multiple"
            @bind-Values="@badgeSelections"
            Placeholder="Select one or more badges"
            TItemValue="Data.Badge"
            TItem="Data.Badge">
            <SelectOptions>
			    @foreach(Data.Badge badge in badges)
			    {
				    <SelectOption TItemValue="Data.Badge" TItem="Data.Badge" Value=@badge Label=@badge.Name />
			    }
		    </SelectOptions>
    </Select>
    </FormItem>

    
        <div class="d-flex justify-content-center">
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <button HtmlType="submit" class="btn btn-primary">
                    Submit
                </button>
            </FormItem>
        </div>
    </Form>
}
@code {
    [Parameter]
    public string ID { get; set; }

    public class Model
    {
        public string Size { get; set; } = AntSizeLDSType.Small;
        public string Name { get; set; }
    }
    public IEnumerable<string> Names { get; set; } = Array.Empty<string>();
    private Model model = new Model();
    record Person(string Name);
    private List<Person> _persons = new List<Person>
        {
            new Person("John"),
            new Person("Lucy"),
            new Person("Jack"),
            new Person("Emily"),
        };

    private List<EarnedBadge> earnedBadges = new();
    private List<CompletedActivity> completedActivities = new();
    private List<Data.Badge> badges = new();
    private User user;
    private IEnumerable<Data.Badge> badgeSelections;
    private bool isAdded = false;

    protected async override Task OnInitializedAsync()
    {
        await init();
    }

    private async Task init()
    {
        Int32.TryParse(ID, out int id);

        user = await UserService.GetUserById(id);

        earnedBadges = await EarnablesService.GetEarnedBadgesByUserId(id) ?? new();
        completedActivities = await EarnablesService.GetCompletedActivitiesByUserId(id) ?? new();

        badges = await EarnablesService.GetAllBadges();

        foreach (EarnedBadge badge in earnedBadges)
        {
            badges.RemoveAll(b => b.Id == badge.BadgeId);
        }
    }

    private async Task OnFinish(EditContext editContext)
    {
        if (badgeSelections == null) return;

        foreach (Data.Badge badge in badgeSelections)
        {
            await UserService.AddBadgeToUser(user, badge);
        }
        isAdded = true;
        StateHasChanged();
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

}
