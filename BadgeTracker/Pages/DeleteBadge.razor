@page "/DeleteBadge/{Id}"

@inject IUserService UserService;
@inject IEarnablesService EarnablesService;

@using System.Text.Json;
@using System.Linq;

<div class="row">
    <div class="col">
    </div>
    <div class="col">
        <h3 class ="text-center">Delete Badge or Activity</h3>
        <Form Model="@model"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              Size="@model.Size">
            <FormItem Label="Select">
                <Select Mode="default"
                        DataSource="@allEarned"
                        @bind-Value="@context.Name"
                        LabelName="@nameof(Earnable.Name)"
                        ValueName="@nameof(Earnable.Name)">
                </Select>
            </FormItem>


            <div class="d-flex justify-content-center">
                <Popconfirm Title="Are you sure you want to delete the badge from this person?" Icon="close-circle">
                    <button HtmlType="submit" class="btn btn-danger">
                        Delete Badge
                    </button>
                </Popconfirm>
               
            </div>
        </Form>
    </div>
    <div class="col">
    </div>

</div>
@code {
    [Parameter]
    public string ID { get; set; }
    public class Model
    {
        public string Size { get; set; } = AntSizeLDSType.Small;
        public string Name { get; set; }
    }
    public IEnumerable<string> Names { get; set; } = Array.Empty<string>();
    private Model model = new Model();

    private User user;
    private List<EarnedBadge> earnedBadges = new();
    private List<CompletedActivity> completedActivities = new();
    private List<Earnable> allEarned = new();

    protected async override Task OnInitializedAsync()
    {
        Int32.TryParse(ID, out int id);
        user = await UserService.GetUserById(id);

        earnedBadges = await EarnablesService.GetEarnedBadgesByUserId(user.UserId) ?? new();
        completedActivities = await EarnablesService.GetCompletedActivitiesByUserId(user.UserId) ?? new();

        allEarned.AddRange(earnedBadges.OfType<Earnable>());
        allEarned.AddRange(completedActivities.OfType<Earnable>());
    }

    record Person(string Name);
    private List<Person> _persons = new List<Person>
        {
            new Person("John"),
            new Person("Lucy"),
            new Person("Jack"),
            new Person("Emily"),
        };

    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

}