@page "/DeleteBadge/{Id}"

@inject IUserService UserService;
@inject IEarnablesService EarnablesService;
@inject NavigationManager NavigationManager
@using System.Text.Json;
@using System.Linq;

@if (isUpdated)
{
    <div class="container full-height">
        <div class="row mb-4 mt-4">
            <div class="col-md-6">
                @if (badgeDeleted && activityDeleted)
                {

                    <h3>Deleted badges and activities from @user.Name!</h3>
                    <button class="btn btn-primary" @onclick="GoToUserManagement">Back to Girl Guides</button>

                }
                else if (badgeDeleted)
                {
                    @if (badgeCount > 1)
                    {
                        <h3>Deleted badges from @user.Name!</h3>
                        <button class="btn btn-primary" @onclick="GoToUserManagement">Back to Girl Guides</button>
                    }
                    else
                    {
                        <h3>Deleted badge from @user.Name!</h3>
                        <button class="btn btn-primary" @onclick="GoToUserManagement">Back to Girl Guides</button>
                    }

                }
                else if (activityDeleted)
                {
                    @if (badgeCount > 1)
                    {
                        <h3>Deleted activities from @user.Name!</h3>
                        <button class="btn btn-primary" @onclick="GoToUserManagement">Back to Girl Guides</button>
                    }
                    else
                    {
                        <h3>Deleted activity from @user.Name!</h3>
                        <button class="btn btn-primary" @onclick="GoToUserManagement">Back to Girl Guides</button>
                    }
                }

            </div>
        </div>
    </div>
}
else
{

    <div class="d-flex justify-content-center">
        <div class="row mt-4 mb-4 panel">
            <div class="col-md-3"></div>
            <div class="col-md-6">
                <h3 class="text-center">Delete Badge or Activity</h3>
                <Form Model="@model"
                      OnFinish="OnFinish"
                      OnFinishFailed="OnFinishFailed"
                      Size="@model.Size">

                    <FormItem Label="Badges">
                        <Select Mode="multiple"
                                DataSource="@badges"
                                @bind-Values="@badgeSelections"
                                Placeholder="Select one or more badges"
                                TItemValue="Data.Badge"
                                TItem="Data.Badge"
                                LabelName="@nameof(Data.Badge.Name)">
                        </Select>
                    </FormItem>

                    <FormItem Label="Activities">
                        <Select Mode="multiple"
                                DataSource="@activities"
                                @bind-Values="@activitySelections"
                                Placeholder="Select one or more activities"
                                TItemValue="Activity"
                                TItem="Activity"
                                LabelName="@nameof(Activity.Name)">
                        </Select>
                    </FormItem>

                    <div class="d-flex justify-content-center">
                        <Popconfirm Title="Are you sure you want to delete these?" Icon="close-circle">
                            <button HtmlType="submit" class="btn btn-danger">
                                Delete
                            </button>
                        </Popconfirm>

                    </div>
                </Form>
            </div>
            <div class="col-md-3"></div>
        </div>
    </div>
}
@code {
    [Parameter]
    public string ID { get; set; }
    public int parsedId;
    public class Model
    {
        public string Size { get; set; } = AntSizeLDSType.Small;
        public string Name { get; set; }
    }
    public IEnumerable<string> Names { get; set; } = Array.Empty<string>();
    private Model model = new Model();

    private User user;
    private List<EarnedBadge> earnedBadges = new();
    private List<CompletedActivity> completedActivities = new();
    private List<Data.Badge> badges = new();
    private List<Data.Activity> activities = new();
    private IEnumerable<Data.Badge> badgeSelections;
    private IEnumerable<Data.Activity> activitySelections;
    private bool isUpdated = false;
    private bool badgeDeleted = false;
    private bool activityDeleted = false;
    private int badgeCount = 0;
    private int activityCount = 0;

    protected async override Task OnInitializedAsync()
    {
        Int32.TryParse(ID, out parsedId);
        user = await UserService.GetUserById(parsedId);

        earnedBadges = await EarnablesService.GetEarnedBadgesByUserId(user.UserId) ?? new();
        completedActivities = await EarnablesService.GetCompletedActivitiesByUserId(user.UserId) ?? new();

        foreach (EarnedBadge badge in earnedBadges)
        {
            badges.Add(await EarnablesService.GetBadgeById(badge.BadgeId));
        }
        foreach (CompletedActivity activity in completedActivities)
        {
            activities.Add(await EarnablesService.GetActivityById(activity.ActivityId));
        }
    }

    private async Task OnFinish(EditContext editContext)
    {
        if (badgeSelections != null)
        {
            badgeDeleted = true;
            foreach (Data.Badge badge in badgeSelections)
            {
                List<EarnedBadge> earnedBadges = await EarnablesService.GetEarnedBadgesByBadgeId(badge.Id);
                EarnedBadge badgeToRemove = earnedBadges.Where(b => b.UserId == parsedId).FirstOrDefault();
                await UserService.RemoveBadgeFromUser(badgeToRemove);
                badgeCount++;
            }
        }

        if (activitySelections != null)
        {
            activityDeleted = true;
            foreach (Activity activity in activitySelections)
            {
                List<CompletedActivity> completedActivities = await EarnablesService.GetCompletedActivitiesByActivityId(activity.Id);
                CompletedActivity activityToRemove = completedActivities.Where(b => b.UserId == parsedId).FirstOrDefault();
                await UserService.RemoveActivityFromUser(activityToRemove);
                activityCount++;
            }
        }
        isUpdated = true;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    private void GoToUserManagement()
    {
        NavigationManager.NavigateTo("/UserManagement");
    }

}